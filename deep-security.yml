Transform: AWS::Serverless-2016-10-31
Description: AWS CloudFormation template to create custom AWS Config rules that interact
  with the Trend Micro Deep Security Manager. You will be billed for the AWS resources
  used if you create a stack from this template.
Resources:
  dsDoesInstanceHavePolicyLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rules/ds-DoesInstanceHavePolicy
      Description: Custom AWS Config rule that checks with the Trend Micro Deep Security
        Manager to see if the named policy is in effect. See https://github.com/deep-security/aws-config
        for more details.
      Handler: dsDoesInstanceHavePolicy.aws_config_rule_handler
      Role: !GetAtt dsConfigRuleRole.Arn
      Runtime: python2.7
      Timeout: 60
  dsIsInstanceClearLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rules/ds-IsInstanceClear
      Description: Custom AWS Config rule that checks with the Trend Micro Deep Security
        Manager to see if the instance is clear of any alerts, warnings, or errors.
        See https://github.com/deep-security/aws-config for more details.
      Handler: dsIsInstanceClear.aws_config_rule_handler
      Role: !GetAtt dsConfigRuleRole.Arn
      Runtime: python2.7
      Timeout: 60
  dsIsInstanceProtectedByLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rules/ds-IsInstanceProtectedBy
      Description: Custom AWS Config rule that checks with the Trend Micro Deep Security
        Manager to see if the instance is protected using the specified security control.
        See https://github.com/deep-security/aws-config for more details.
      Handler: dsIsInstanceProtectedBy.aws_config_rule_handler
      Role: !GetAtt dsConfigRuleRole.Arn
      Runtime: python2.7
      Timeout: 60
  dsIsInstanceProtectedByAntiMalwareLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: rules/ds-IsInstanceProtectedByAntiMalware
      Description: Custom AWS Config rule that checks with the Trend Micro Deep Security
        Manager to see if the instance is protected using the anti-malware security
        control. See https://github.com/deep-security/aws-config for more details.
      Handler: dsIsInstanceProtectedByAntiMalware.aws_config_rule_handler
      Role: !GetAtt dsConfigRuleRole.Arn
      Runtime: python2.7
      Timeout: 60
  dsConfigRuleBucket:
    Type: AWS::S3::Bucket
  dsConfigRuleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Sid: AllowLambdaAssumeRole
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: dsConfigRulePolicy
        PolicyDocument:
          Statement:
          - Action:
            - kms:Decrypt
            Effect: Allow
            Resource: '*'
          - Action:
            - s3:GetObject
            Effect: Allow
            Resource: !Join [ "", [ !GetAtt dsConfigRuleBucket.Arn, "/*" ] ]
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: '*'
          - Action:
            - config:PutEvaluations
            Effect: Allow
            Resource: '*'
Outputs:
  dsDoesInstanceHavePolicyLambda:
    Description: ARN for the dsDoesInstanceHavePolicy lambda
    Value: !GetAtt dsDoesInstanceHavePolicyLambda.Arn
  dsIsInstanceClearLambda:
    Description: ARN for the dsIsInstanceClearLambda lambda
    Value: !GetAtt dsIsInstanceClearLambda.Arn
  dsIsInstanceProtectedByLambda:
    Description: ARN for the dsIsInstanceProtectedByLambda lambda
    Value: !GetAtt dsIsInstanceProtectedByLambda.Arn
  dsIsInstanceProtectedByAntiMalwareLambda:
    Description: ARN for the dsIsInstanceProtectedByAntiMalwareLambda lambda
    Value: !GetAtt dsIsInstanceProtectedByAntiMalwareLambda.Arn
